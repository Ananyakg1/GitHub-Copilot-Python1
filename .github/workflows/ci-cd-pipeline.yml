name: CI/CD Pipeline with Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  IMAGE_NAME: flask-change-calculator
  NAMESPACE: github-copilot-ns

jobs:
  build:
    name: Build and Security Scan
    runs-on: ubuntu-latest
    
    outputs:
      build-id: ${{ steps.build-info.outputs.build-id }}
      image-tag: ${{ steps.build-info.outputs.image-tag }}
    
    steps:
    - name: Setup Job
      run: |
        echo "Starting CI/CD Pipeline..."
        echo "Workflow: ${{ github.workflow }}"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit SHA: ${{ github.sha }}"
        
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate Build Information
      id: build-info
      run: |
        BUILD_ID="${GITHUB_RUN_NUMBER}-${GITHUB_SHA::8}"
        IMAGE_TAG="${BUILD_ID}"
        echo "build-id=${BUILD_ID}" >> $GITHUB_OUTPUT
        echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "Build ID: ${BUILD_ID}"
        echo "Image Tag: ${IMAGE_TAG}"
        
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version
        
    - name: Install Additional Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget jq
        
    - name: Install Trivy Security Scanner
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        trivy version
        
    - name: Azure Container Registry Login
      run: |
        az acr login \
          --name ${{ env.REGISTRY_LOGIN_SERVER }} \
          --username ${{ secrets.REGISTRY_USERNAME }} \
          --password ${{ secrets.REGISTRY_PASSWORD }}
          
    - name: Build Docker Image
      run: |
        docker build -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.build-info.outputs.image-tag }} .
        docker build -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest .
        
    - name: Run Trivy Security Scan
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.build-info.outputs.image-tag }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        
    - name: Push Docker Image to ACR
      run: |
        docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.build-info.outputs.image-tag }}
        docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
        
    - name: Upload Kubernetes Manifests
      uses: actions/upload-artifact@v4
      with:
        name: k8s-manifests
        path: k8s/
        retention-days: 30

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    environment: 
      name: production
      url: https://your-app-url.com
    
    steps:
    - name: Setup Job
      run: |
        echo "Starting deployment to AKS..."
        echo "Build ID: ${{ needs.build.outputs.build-id }}"
        echo "Image Tag: ${{ needs.build.outputs.image-tag }}"
        echo "Target Namespace: ${{ env.NAMESPACE }}"
        
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Download Kubernetes Manifests
      uses: actions/download-artifact@v4
      with:
        name: k8s-manifests
        path: k8s/
        
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version
        
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        
    - name: Azure Login
      run: |
        az login --service-principal \
          --username ${{ secrets.AZURE_CLIENT_ID }} \
          --password ${{ secrets.AZURE_CLIENT_SECRET }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Get AKS Credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
          --name ${{ secrets.AKS_CLUSTER_NAME }} \
          --overwrite-existing
          
    - name: Verify Kubernetes Connection
      run: |
        kubectl cluster-info
        kubectl get nodes
        
    - name: Create Namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        kubectl label namespace ${{ env.NAMESPACE }} environment=production --overwrite
        
    - name: Update Image Tag in Deployment
      run: |
        sed -i 's|app_image|${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}|g' k8s/deployment.yaml
        cat k8s/deployment.yaml
        
    - name: Deploy to AKS
      run: |
        echo "Deploying application to AKS cluster..."
        kubectl apply -f k8s/ -n ${{ env.NAMESPACE }}
        
    - name: Wait for Deployment Rollout
      run: |
        kubectl rollout status deployment/flask-change-calculator -n ${{ env.NAMESPACE }} --timeout=300s
        
    - name: Verify Deployment
      run: |
        echo "Verifying deployment..."
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=flask-change-calculator
        kubectl get services -n ${{ env.NAMESPACE }} -l app=flask-change-calculator
        kubectl get deployment flask-change-calculator -n ${{ env.NAMESPACE }}
        
    - name: Get Application Status
      run: |
        echo "=== Deployment Summary ==="
        kubectl get all -n ${{ env.NAMESPACE }} -l app=flask-change-calculator
        echo ""
        echo "=== Pod Logs ==="
        kubectl logs -l app=flask-change-calculator -n ${{ env.NAMESPACE }} --tail=50 || echo "No logs available yet"
        echo ""
        echo "=== Network Policies ==="
        kubectl get networkpolicies -n ${{ env.NAMESPACE }}
        
    - name: Run Health Check
      run: |
        echo "Running post-deployment health checks..."
        kubectl wait --for=condition=ready pod -l app=flask-change-calculator -n ${{ env.NAMESPACE }} --timeout=300s
        
        # Get a pod name for health check
        POD_NAME=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=flask-change-calculator -o jsonpath='{.items[0].metadata.name}')
        
        if [ ! -z "$POD_NAME" ]; then
          echo "Testing health endpoint on pod: $POD_NAME"
          kubectl exec -n ${{ env.NAMESPACE }} $POD_NAME -- wget -q --spider http://localhost:8080/health || echo "Health check failed"
        else
          echo "No pods found for health check"
        fi

    - name: Deployment Success Notification
      if: success()
      run: |
        echo "✅ Deployment completed successfully!"
        echo "Image: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}"
        echo "Namespace: ${{ env.NAMESPACE }}"
        echo "Build ID: ${{ needs.build.outputs.build-id }}"
        
    - name: Deployment Failure Notification
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs above for detailed error information."
        kubectl describe pods -n ${{ env.NAMESPACE }} -l app=flask-change-calculator || echo "Could not describe pods"
