name: CI/CD Pipeline with Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate build information
        id: buildinfo
        run: |
          echo "BUILD_ID=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV


      - name: Install additional dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg jq wget

      - name: Install Azure CLI
        run: |
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
          AZ_REPO=$(lsb_release -cs)
          echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update
          sudo apt-get install -y azure-cli

      - name: Install Trivy security scanner
        run: |
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v0.48.4/trivy_0.48.4_Linux-64bit.deb > trivy.deb
          sudo dpkg -i trivy.deb

  build:
    name: Build and Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/flask-app:${{ env.IMAGE_TAG }} .

      - name: Trivy Image Scan (table)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.REGISTRY_LOGIN_SERVER }}/flask-app:${{ env.IMAGE_TAG }}
          format: table
          exit-code: 1
          ignore-unfixed: true
          severity: CRITICAL,HIGH

      - name: Trivy Image Scan (SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.REGISTRY_LOGIN_SERVER }}/flask-app:${{ env.IMAGE_TAG }}
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true
          severity: CRITICAL,HIGH

      - name: Upload Trivy SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Push Docker image
        run: |
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/flask-app:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: Set image tag in deployment
        run: |
          kubectl set image deployment/app-deployment flask-app=${{ secrets.REGISTRY_LOGIN_SERVER }}/flask-app:${{ env.IMAGE_TAG }} -n github_copilot_ns

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s-deployment.yaml -n github_copilot_ns

      - name: Verify deployment rollout
        run: |
          kubectl rollout status deployment/app-deployment -n github_copilot_ns
