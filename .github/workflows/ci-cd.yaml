name: Build, Security Scan and Deploy to AKS

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches: 
      - main

env:
  REGISTRY_NAME: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  CLUSTER_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  NAMESPACE: github-copilot-ns
  APP_NAME: flask-app
  IMAGE_NAME: app_image

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and Security Scan
    
    outputs:
      build-id: ${{ steps.build-info.outputs.build-id }}
      image-tag: ${{ steps.build-info.outputs.image-tag }}
      
    steps:
    - name: Setup Job
      run: |
        echo "Starting CI/CD pipeline for Flask application"
        echo "Workflow triggered by: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit SHA: ${{ github.sha }}"
        
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate Build Information
      id: build-info
      run: |
        BUILD_ID="${{ github.run_number }}"
        IMAGE_TAG="${{ github.sha }}-${BUILD_ID}"
        echo "build-id=${BUILD_ID}" >> $GITHUB_OUTPUT
        echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "Generated Build ID: ${BUILD_ID}"
        echo "Generated Image Tag: ${IMAGE_TAG}"
        
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version
        
    - name: Install Additional Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl wget
        
    - name: Install Trivy Security Scanner
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
        trivy --version
        
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
        
    - name: Login to Azure Container Registry
      run: |
        echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ secrets.REGISTRY_LOGIN_SERVER }} --username ${{ secrets.REGISTRY_USERNAME }} --password-stdin
        
    - name: Build Docker Image
      run: |
        IMAGE_FULL_NAME="${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.build-info.outputs.image-tag }}"
        echo "Building Docker image: ${IMAGE_FULL_NAME}"
        docker build -t ${IMAGE_FULL_NAME} .
        echo "IMAGE_FULL_NAME=${IMAGE_FULL_NAME}" >> $GITHUB_ENV
        
    - name: Run Trivy Security Scan - Table Format
      run: |
        echo "Running Trivy security scan in table format..."
        trivy image \
          --format table \
          --severity CRITICAL,HIGH \
          --ignore-unfixed \
          --exit-code 0 \
          ${{ env.IMAGE_FULL_NAME }}
          
    - name: Run Trivy Security Scan - SARIF Format
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.IMAGE_FULL_NAME }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true
        exit-code: '0'
        
    - name: Display Trivy Results Summary
      if: always()
      run: |
        echo "=== Trivy Security Scan Results ==="
        trivy image \
          --format table \
          --severity CRITICAL,HIGH \
          --ignore-unfixed \
          --exit-code 0 \
          ${{ env.IMAGE_FULL_NAME }} || echo "Trivy scan completed with findings"
        echo "=== End of Trivy Results ==="
        
    - name: Upload Trivy SARIF Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy Filesystem Scan
      run: |
        echo "Running Trivy filesystem scan..."
        trivy fs \
          --format table \
          --severity CRITICAL,HIGH \
          --ignore-unfixed \
          --exit-code 0 \
          .
          
    - name: Push Docker Image to ACR
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      run: |
        echo "Pushing Docker image to Azure Container Registry..."
        docker push ${{ env.IMAGE_FULL_NAME }}
        echo "Image pushed successfully: ${{ env.IMAGE_FULL_NAME }}"
        
    - name: Security Scan Summary
      run: |
        echo "=== Security Scan Summary ==="
        echo "Build ID: ${{ steps.build-info.outputs.build-id }}"
        echo "Image Tag: ${{ steps.build-info.outputs.image-tag }}"
        echo "Image Name: ${{ env.IMAGE_FULL_NAME }}"
        echo "Trivy scans completed successfully"
        echo "=== End Summary ==="

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to AKS
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Setup Deploy Job
      run: |
        echo "Starting deployment to Azure Kubernetes Service"
        echo "Build ID: ${{ needs.build.outputs.build-id }}"
        echo "Image Tag: ${{ needs.build.outputs.image-tag }}"
        
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version
        
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        
    - name: Install Additional Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl wget
        
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
        
    - name: Set AKS Context
      run: |
        echo "Getting AKS credentials..."
        az aks get-credentials \
          --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} \
          --name ${{ env.CLUSTER_NAME }} \
          --overwrite-existing
        
        echo "Verifying cluster connection..."
        kubectl cluster-info
        kubectl get nodes
        
    - name: Create Namespace if Not Exists
      run: |
        if kubectl get namespace ${{ env.NAMESPACE }} >/dev/null 2>&1; then
          echo "Namespace ${{ env.NAMESPACE }} already exists"
        else
          echo "Creating namespace ${{ env.NAMESPACE }}"
          kubectl create namespace ${{ env.NAMESPACE }}
        fi
        kubectl get namespace ${{ env.NAMESPACE }}
        
    - name: Apply ConfigMap
      run: |
        echo "Applying ConfigMap..."
        kubectl apply -f k8s/deployment.yaml --namespace=${{ env.NAMESPACE }}
        kubectl get configmap --namespace=${{ env.NAMESPACE }}
        
    - name: Update Image in Deployment
      run: |
        IMAGE_FULL_NAME="${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}"
        echo "Updating deployment with image: ${IMAGE_FULL_NAME}"
        
        # Update the deployment yaml with the correct image
        sed -i "s|image: app_image|image: ${IMAGE_FULL_NAME}|g" k8s/deployment.yaml
        
        echo "Updated deployment file content:"
        grep -A 5 -B 5 "image:" k8s/deployment.yaml
        
    - name: Apply Kubernetes Manifests
      run: |
        echo "Applying Kubernetes manifests..."
        
        # Apply all manifests
        kubectl apply -f k8s/ --namespace=${{ env.NAMESPACE }}
        
        echo "Kubernetes resources applied successfully"
        
    - name: Wait for Deployment Rollout
      run: |
        echo "Waiting for deployment rollout to complete..."
        kubectl rollout status deployment/${{ env.APP_NAME }}-deployment \
          --namespace=${{ env.NAMESPACE }} \
          --timeout=300s
          
    - name: Verify Deployment
      run: |
        echo "=== Deployment Verification ==="
        
        echo "Pods status:"
        kubectl get pods --namespace=${{ env.NAMESPACE }} -l app=${{ env.APP_NAME }}
        
        echo "Service status:"
        kubectl get svc --namespace=${{ env.NAMESPACE }} -l app=${{ env.APP_NAME }}
        
        echo "Deployment status:"
        kubectl get deployment --namespace=${{ env.NAMESPACE }} ${{ env.APP_NAME }}-deployment
        
        echo "ConfigMap status:"
        kubectl get configmap --namespace=${{ env.NAMESPACE }}
        
        echo "=== Deployment Health Check ==="
        # Wait a bit for pods to be fully ready
        sleep 30
        
        # Check if pods are running and ready
        READY_PODS=$(kubectl get pods --namespace=${{ env.NAMESPACE }} -l app=${{ env.APP_NAME }} -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | wc -w)
        echo "Ready pods count: ${READY_PODS}"
        
        if [ "${READY_PODS}" -ge 1 ]; then
          echo "✅ Deployment successful! At least one pod is running."
        else
          echo "❌ Deployment failed! No pods are running."
          kubectl describe pods --namespace=${{ env.NAMESPACE }} -l app=${{ env.APP_NAME }}
          exit 1
        fi
        
    - name: Deployment Summary
      run: |
        echo "=== Deployment Summary ==="
        echo "Application: ${{ env.APP_NAME }}"
        echo "Namespace: ${{ env.NAMESPACE }}"
        echo "Image: ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}"
        echo "Build ID: ${{ needs.build.outputs.build-id }}"
        echo "Deployment completed successfully!"
        echo "=== End Summary ==="
