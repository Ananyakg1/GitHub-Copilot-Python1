apiVersion: v1
kind: Namespace
metadata:
  name: github-copilot-ns
  labels:
    name: github-copilot-ns
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: github-copilot-ns
  labels:
    app: flask-app
    environment: production
data:
  PORT: "8080"
  HOST: "0.0.0.0"
  DEBUG: "false"
  ENVIRONMENT: "production"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app-deployment
  namespace: github-copilot-ns
  labels:
    app: flask-app
    version: v1
    environment: production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
        version: v1
        environment: production
    spec:
      serviceAccountName: flask-app-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: flask-app
        image: app_image
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: PORT
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: HOST
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DEBUG
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: ENVIRONMENT
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: var-log-volume
          mountPath: /var/log
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: var-log-volume
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
  namespace: github-copilot-ns
  labels:
    app: flask-app
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: flask-app
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flask-app-sa
  namespace: github-copilot-ns
  labels:
    app: flask-app
    environment: production
automountServiceAccountToken: false
